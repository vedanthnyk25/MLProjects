# -*- coding: utf-8 -*-
"""Parkinson's Disease Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13eWpouiqIx9HTB6XlbawTSG2rJSk8uRY
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler
from sklearn import svm

parkin_data=pd.read_csv("/content/Parkinsson disease.csv",header=0)

parkin_data.head()

parkin_data.status.value_counts()

# Convert potential non-numeric columns to numeric, handling errors
for col in parkin_data.columns:
    if parkin_data[col].dtype == 'object':
        try:
            parkin_data[col] = pd.to_numeric(parkin_data[col], errors='coerce')
            # 'coerce' will replace non-convertible values with NaN
        except:
            print(f"Could not convert column {col} to numeric")

# Calculate the mean after conversion
parkin_data.groupby('status').mean()

x=parkin_data.drop(columns=["name","status"],axis=1)
y=parkin_data.status

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,stratify=y,random_state=4)

scaler=StandardScaler()
scaler.fit(x_train)

x_train=scaler.transform(x_train)
x_test=scaler.transform(x_test)

print(x_train)

model=svm.SVC(kernel='linear')

model.fit(x_train,y_train)

train_prediction=model.predict(x_train)
test_prediction=model.predict(x_test)

"""Evaluation of the Model:"""

train_accuracy=accuracy_score(train_prediction,y_train)
test_accuracy=accuracy_score(test_prediction,y_test)

print("Training Accuracy score=",train_accuracy*100,"%")
print("Testing Accuracy score=",test_accuracy*100,"%")

"""Building A Predicting System:"""

input_data=[119.992,157.302,74.997,0.00784,0.00007,0.0037,0.00554,0.01109,0.04374,0.426,0.02182,0.0313,0.02971,0.06545,0.02211,21.033,0.414783,0.815285,-4.813031,0.266482,2.301442,0.284654]
input_data_nparr=np.asarray(input_data)
reshaped_data=input_data_nparr.reshape(1,-1)
standard_data=scaler.transform(reshaped_data)
prediction=model.predict(standard_data)
if(prediction[0]==0):
  print("The Person does not have Parkinson's Disease.")
else:
    print("The person has Parkinson's Disease.")

